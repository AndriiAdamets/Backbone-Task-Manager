// Generated by CoffeeScript 1.6.2
(function() {
  window.TaskView = Backbone.View.extend({
    tagName: 'tr',
    events: {
      'click .state': 'changeState',
      'click button.delete': function() {
        return this.model.destroy();
      }
    },
    initialize: function() {
      this.template = _.template($("#viewTask").html());
      this.listenTo(this.model, "change", this.render);
      this.listenTo(this.model, "destroy", this["delete"]);
      return this.render();
    },
    render: function() {
      return this.$el.html(this.template(this.model.toJSON()));
    },
    changeState: function(ev) {
      this.model.set({
        done: !(this.model.get("done"))
      });
      return this.model.save();
    },
    "delete": function() {
      return $(this.el).remove();
    }
  });

  window.TasksView = Backbone.View.extend({
    events: {
      "click .addTask": "addTask",
      "click button.clearList": "clearlist",
      "click": "distribution"
    },
    initialize: function() {
      this.template = _.template($("#viewTasks").html());
      this.allCount = 0;
      this.collAll = new TasksCollection();
      this.collAll.fetch();
      this.collDisplayed = new Backbone.Collection();
      this.dispLayedItemsType = "all";
      this.listenTo(this.collAll, "add", this.addOne);
      this.listenTo(this.collDisplayed, "add", this.showOne);
      this.render();
      this.$("div.alert").hide();
      return $('#newDate').datepicker();
    },
    addTask: function() {
      var dateCorect, nameCorect;

      nameCorect = checkName();
      dateCorect = checkDate();
      if (nameCorect && dateCorect) {
        this.collAll.add({
          name: this.$("#newName").val(),
          date: this.$("#newDate").val(),
          done: false
        });
        this.distribution();
        this.$("#newName").val("");
        this.$("#newDate").val("");
        return this.$(".alert").hide();
      }
    },
    addOne: function(model) {
      return model.save();
    },
    showOne: function(model) {
      var view;

      view = new TaskView({
        model: model
      });
      return this.$("tbody").append(view.render());
    },
    hideAll: function() {
      this.$("tbody").html("");
      return this.collDisplayed.reset();
    },
    distribution: function() {
      this.updateFooter();
      if (this.dispLayedItemsType === "done") {
        return this.renderList(this.collAll.filter(function(model) {
          return model.get("done") === true;
        }));
      } else if (this.dispLayedItemsType === "notDone") {
        return this.renderList(this.collAll.filter(function(model) {
          return model.get("done") === false;
        }));
      } else {
        return this.renderList(this.collAll.models);
      }
    },
    render: function() {
      return this.$el.html(this.template);
    },
    renderList: function(list) {
      var i, _i, _ref, _results;

      this.hideAll();
      _results = [];
      for (i = _i = 0, _ref = list.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.collDisplayed.add(list[i]));
      }
      return _results;
    },
    clearlist: function() {
      var model, _results;

      _results = [];
      while (model = this.collAll.first()) {
        _results.push(model.destroy());
      }
      return _results;
    },
    updateFooter: function() {
      this.$(".allCount").text(this.collAll.length);
      this.$(".doneCount").text(this.collAll.filter(function(model) {
        return model.get("done") === true;
      }).length);
      return this.$(".notDoneCount").text(this.collAll.filter(function(model) {
        return model.get("done") === false;
      }).length);
    },
    changeViewType: function(type) {
      this.dispLayedItemsType = type;
      return this.distribution();
    }
  });

}).call(this);
